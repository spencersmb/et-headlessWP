import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Link from 'next/link';
import { flattenAllPosts, getAllPosts, getPaginatedPosts, getPaginatedPostsV2 } from '../lib/posts'
import Pagination from '../components/pagination';
import { addApolloState, initializeApollo, useApollo } from '../lib/apollo-client'
import { QUERY_ALL_POSTS, QUERY_POST_PER_PAGE } from '../graphqlData/postsData'
import { useQuery, gql } from '@apollo/client'
import { cache, NAV_QUERY, NavVar } from '../lib/apollo-cache'

const useWriteQuery = () => {
  const cacheDataLocally = (data: any) => {
    cache.writeQuery({
      query: NAV_QUERY,
      data: {
        ...data
      },
    });
  }
  return {
    cacheDataLocally
  }
}
export default function Home(props) {
  // console.log('props', props)

  const {posts, pagination} = props
  const {cacheDataLocally} = useWriteQuery()
  const {data} = useQuery(NAV_QUERY);
  console.log('isNav Open', data)

  function toggleNav() {

    // get current value
    const _current = NavVar()

    // set Local value
    NavVar({
      isOpen: !_current.isOpen
    })

    // optionally update the cache
    // cacheDataLocally(
    //   {
    //     nav:{
    //       isOpen: !_current.isOpen
    //     }
    //   }
    // )
    // cache.writeQuery({
    //   query: NAV_QUERY,
    //   data: {
    //     nav:{
    //       isOpen: !_current.isOpen
    //     }
    //   },
    // });
  }
  // const postsPerPage = Number(postData.data.allSettings.readingSettingsPostsPerPage);
  // const pagesCount = Math.ceil(posts.length / postsPerPage);
  //
  // let page = Number(1);
  // if (typeof page === 'undefined' || isNaN(page) || page > pagesCount) {
  //   page = 1;
  // }
  //
  // const offset = postsPerPage * (page - 1);
  // const sortedPosts = sortStickyPosts(posts);
  // const newPosts = sortedPosts.slice(offset, offset + postsPerPage);

  /*
  WITH-APOLLO
   */
  // const { loading, error, data, fetchMore, networkStatus } = useQuery(
  //   QUERY_ALL_POSTS,
  //   {
  //     // variables: allPostsQueryVars,
  //     // Setting this value to true will make the component rerender when
  //     // the "networkStatus" changes, so we are able to know if it is fetching
  //     // more data
  //     notifyOnNetworkStatusChange: true,
  //   }
  // )

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1 className={styles.title}>Welcome to our demo blog!</h1>
      <p>
        You can find more articles on the{' '}
        <Link href='/blog'>
          <a>blog articles page</a>
        </Link>
      </p>
      <button onClick={toggleNav}>IsNav Open</button>
      <div>
        <h3>Posts</h3>
        <ul>
          {posts
            .filter((post,index) => index <10 )
            .map((post) => (
            <li key={post.id}>
              <Link href={`/${post.slug}`}>
                {post.title}
              </Link>
            </li>
          ))}
        </ul>
      </div>

      <div>
        <h3>Pagination</h3>
        <Pagination
          {...pagination}
        />
      </div>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
//
export async function getStaticProps(context){

  const {__APOLLO_STATE__, posts, pagination} = await getPaginatedPostsV2()
  return {
    props: {
      __APOLLO_STATE__,
      posts,
      pagination: {
        ...pagination,
        basePath: '',
      },
    },
    revalidate: 5
  };

  /**
   * WITH-APOLLO
   */
  // const apolloClient = initializeApollo()
  //
  // const data = await apolloClient.query({
  //   query: QUERY_ALL_POSTS,
  //   // variables: allPostsQueryVars,
  // })
  // console.log('data', data)
  //
  // const posts = flattenAllPosts(data?.data.posts) || []
  //
  // return addApolloState(apolloClient, {
  //   props: {
  //     posts,
  //     basePath: '/blog'
  //   },
  //   revalidate: 5,
  // })

}
